
import java.util.Scanner;

class Prim {

	
	public static int V;

	
	int minKey(int key[], Boolean mstSet[])
	{
		
		int min = Integer.MAX_VALUE, min_index = -1;

		for (int v = 0; v < V; v++)
			if (mstSet[v] == false && key[v] < min) {
				min = key[v];
				min_index = v;
			}

		return min_index;
	}

	
	void printMST(int parent[], int graph[][])
	{
    int sum = 0;
		System.out.println("Edge \tWeight");
		for (int i = 1; i < V; i++){
      sum += graph[i][parent[i]];
			System.out.println(parent[i] + " - " + i + "\t"+ graph[i][parent[i]]);
    }
    System.out.println("MST Total Weight:- "+ sum);
	}

	
	void primMST(int graph[][])
	{
		
		int parent[] = new int[V];

		
		int key[] = new int[V];

		
		Boolean mstSet[] = new Boolean[V];

		
		for (int i = 0; i < V; i++) {
			key[i] = Integer.MAX_VALUE;
			mstSet[i] = false;
		}

		
		key[0] = 0;
	
		
		parent[0] = -1;

		
		for (int count = 0; count < V - 1; count++) {
			
			
			int u = minKey(key, mstSet);

			
			mstSet[u] = true;

			
			for (int v = 0; v < V; v++)
				if (graph[u][v] != 0 && mstSet[v] == false
					&& graph[u][v] < key[v]) {
					parent[v] = u;
					key[v] = graph[u][v];
				}
		}

		// Print the constructed MST
		printMST(parent, graph);
	}

	public static void main(String[] args)
	{
		Prim t = new Prim();
    Scanner sc = new Scanner(System.in);
    System.out.println("Enter number of vertices");
    V = sc.nextInt();
		int graph[][] = new int[V][V];
    System.out.println("Enter the adjacency matrix:-");
    for (int i = 0; i < V; i++) {
      for (int j = 0; j < V; j++) {
        graph[i][j] = sc.nextInt();
      }
    }
    sc.close();
		t.primMST(graph);
	}
}

